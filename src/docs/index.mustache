<div class="intro">
    <p>
    Create one or more listeners to watch for nodes with specified
     selectors to enter either the viewport or a specified region
    </p>
</div>

{{>getting-started}}

<h2>Description</h2>

<p>
A BeaconListener polls periodically and checks if each element's region intersects a
 predefined region.
</p>
<p>
The region will default to the window viewport, but can be set to any element in the document.
</p>
<h3>Basic Usage</h3>
```
YUI().use('beacon-listener', 'transition', function(e){
	var BeaconListener = Y.Perturbatio.BeaconListener,
		myListener;
	//listen for all elements with a class of 'beacon'
	myListener = new BeaconListener({
		beacons: '.beacon'
	});

	Y.on('beaconlistener:found', function(e){
		e.beacon.show(true);
	});

	Y.on('beaconlistener:lost', function(e){
		e.beacon.hide(true);
	});
});
```
<h3>Advanced Usage</h3>
```
YUI().use('beacon-listener', 'transition', function(e){
	var BeaconListener = Y.Perturbatio.BeaconListener,
		myListener;
	// listen for all elements with a class of 'beacon'
	// but only if they are fully inside the region defined by #my-region
	myListener = new BeaconListener({
		beacons: '.beacon',
		region: '#my-region',
		fullyInside: true,
		pollInterval: 200
	});

	Y.on('beaconlistener:found', function(e){
		e.beacon.show(true);
	});

	Y.on('beaconlistener:lost', function(e){
		e.beacon.hide(true);
	});

	//listen to events for this listener only
	myListener.on('found', function(e){
		Y.log('found a beacon: ', e.beacon.get('id'));
	});
});
```

